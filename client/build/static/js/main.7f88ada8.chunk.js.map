{"version":3,"sources":["App.js","popup.js","index.js"],"names":["Loader","sizeUnit","size","color","loading","Patient","patient","lastName","firstName","uiPulse","uiTemp","town","Medications","pulse","temp","patientSelected","_id","selectPatient","handleChange","updateStatus","showForm","displayForm","patientIndex","Button","onClick","map","medicineIndex","medname","dose","startDate","stopDate","key","name","placeholder","onChange","e","App","observer","mobxStore","patients","className","popup","message","success","toast","error","observable","event","target","value","oldTemp","oldPulse","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","then","response","getPatients","patientsArray","length","json","Object","keys","push","medications","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f88ada8.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { ClipLoader } from 'react-spinners'\nimport { ToastContainer } from 'react-toastify'\nimport { observer } from 'mobx-react'\nimport { Button } from 'reactstrap'\n\n/* \n patientSelected\n Starts out as null, set to true/false afterwards to show/hide the patients medications\n*/\n\n/*\n  patientIndex\n  Used for key indexing/selections/updating data\n*/\n\nconst Loader = () => <ClipLoader\n  sizeUnit=\"px\"\n  size={50}\n  color=\"#123abc\"\n  loading\n/>\n\n// props.patient.lastName\nconst Patient = ({\n    patient: {\n      lastName = \"\",\n      firstName = \"\",\n      // uiPulse and uiTemp are used to show the temp/pulse on the ui if the user has inputed information into the form\n      uiPulse,\n      uiTemp,\n      town = \"\",\n      Medications,\n      pulse,\n      temp,\n      patientSelected = false,\n      _id,\n      selectPatient = () => {},\n      handleChange = () => {},\n      updateStatus = () => {},\n      showForm = () => {},\n      displayForm = false,\n      patientIndex = 0 /* Required for proper keying in react! */\n    }\n  }) =>\n    <div>\n      <h2>Patient:</h2>\n      <Button onClick={() => selectPatient({patientIndex, _id})}>{patientSelected ? \"Hide Patient\" : \"Select Patient\"}</Button>\n      <br/>\n      <br/>\n      <p>FirstName: {firstName}</p>\n      <p>LastName: {lastName}</p>\n      <p>Town: {town}</p>\n      {patientSelected && <h3>Medicine:</h3>}\n      {patientSelected && (Medications ? Medications.map(({medname, dose, startDate, stopDate}, medicineIndex) =>\n          <div key={`${patientIndex}-${medicineIndex}-medicine-key`}>\n            <h3>{medicineIndex+1})</h3>\n            <p>Medicine Name: {medname}</p>\n            <p>Dosage: {dose}</p>\n            <p>Start Date: {startDate}</p>\n            {stopDate && <p>Stop Date: {stopDate}</p>}\n            <br/>\n          </div>\n        ) : Loader())\n      }\n      <br/>\n      {patientSelected && <h3>Status:</h3>}\n      {/* ({patientIndex, _id, temp, pulse}) */}\n      {patientSelected && ((temp && pulse) ?\n        <div>\n          <p>Temperature: {uiTemp || temp}</p>\n          <p>Pulse: {uiPulse || pulse}</p>\n        </div> : Loader())\n      }\n      {patientSelected && <div>\n        {displayForm ?\n          <div>\n            <input name=\"temp\" placeholder=\"Temperature\" onChange={e => handleChange(\"uiTemp\", e, patientIndex)} />\n            <br/>\n            <br/>\n            <input name=\"pulse\" placeholder=\"Pulse\" onChange={e => handleChange(\"uiPulse\", e, patientIndex)} />\n            <br/>\n            <br/>\n            <Button onClick={() => updateStatus({patientIndex, _id, temp: uiTemp || temp, pulse: uiPulse || pulse})}>Save</Button>\n          </div> :\n           <Button onClick={() => showForm({patientIndex})}>Edit Status</Button>\n        }\n      </div>\n      }\n      <hr/>\n    </div>\n\n\n// https://medium.com/@pyrolistical/destructuring-nested-objects-9dabdd01a3b8\n// props.mobxStore.patients is basically what I'm doing here\nconst App = observer(\n  ({\n    mobxStore: { patients = [], selectPatient = () => {}, updateStatus = () => {}, handleChange = () => {}, showForm = () => {} }\n  }) => \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ToastContainer />\n        <h1>Medical Startup App #91235!</h1>\n      </header>\n        {patients.map((patient, patientIndex) =>\n          <Patient key={`patient-${patientIndex}`} patient={{ ...patient, patientIndex, selectPatient, updateStatus, handleChange, showForm }}/>\n        )}\n    </div>\n)\n\nexport default App\n","import { toast } from 'react-toastify'\r\nexport const popup = ( message = \"Wow so easy!\", success = true) => success ? toast.success(message) : toast.error(message)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { observable } from \"mobx\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { popup } from './popup'\n\nconst mobxStore = observable({\n    showForm: ({patientIndex}) => {\n        mobxStore.patients[patientIndex].displayForm = true\n    },\n    handleChange: (key, event, patientIndex) => {\n        mobxStore.patients[patientIndex][key] = event.target.value\n    },\n    updateStatus: ({patientIndex, _id, temp, pulse}) => {\n        const oldTemp = mobxStore.patients[patientIndex].temp\n        const oldPulse = mobxStore.patients[patientIndex].pulse\n        try {\n            mobxStore.patients[patientIndex].temp = temp\n            mobxStore.patients[patientIndex].pulse = pulse\n            fetch(`/patient-status/${_id}`, {\n                method: 'PUT',\n                mode: 'cors', // no-cors, cors, *same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json',\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                redirect: 'follow', // manual, *follow, error\n                referrer: 'no-referrer', // no-referrer, *client, \n                body: JSON.stringify({temp, pulse})\n            }).then(response =>\n                popup(\"Successful update!\", true)\n            )  \n        } catch (error) {\n            mobxStore.patients[patientIndex].temp = oldTemp\n            mobxStore.patients[patientIndex].pulse = oldPulse\n            popup(\"Did not update!\", false)\n        }\n        mobxStore.patients[patientIndex].displayForm = false\n    },\n    getPatients: () => {\n        let patientsArray = []\n        try {\n            // Don't make request if we already have the data\n            if (mobxStore.patients.length === 0)\n                fetch('/patients').then(response => response.json()).then(patients => {\n                    Object.keys(patients).map(_id =>\n                        patientsArray.push({ _id, ...patients[_id]})\n                    )\n                    mobxStore.patients = patientsArray\n                })\n        } catch (error) {\n            popup(\"Failed to fetch patients!\", false)\n        }\n    },\n    selectPatient: ({patientIndex, _id}) => {\n        try {\n            // If statements are here to avoid making request for data we already have\n            if (!mobxStore.patients[patientIndex].temp || mobxStore.patients[patientIndex].pulse)\n                fetch(`/patient-status/${_id}`).then(response => response.json()).then(({temp, pulse}) => {\n                    mobxStore.patients[patientIndex].temp = temp\n                    mobxStore.patients[patientIndex].pulse = pulse\n                })\n            if (!mobxStore.patients[patientIndex].Medications)\n                fetch(`/medications/${_id}`).then(response => response.json()).then(medications => {\n                    mobxStore.patients[patientIndex].Medications = medications.Medications\n                })\n        } catch (error) {\n            popup(\"Failed to fetch medications/patient status!\", false)\n        }\n        mobxStore.patients[patientIndex].patientSelected = !mobxStore.patients[patientIndex].patientSelected\n    },\n    patients: []\n    // Example Schema\n    // patients: [\n    //     {\n    //       patientSelected: false,\n    //       lastName: \"Rogen\",\n    //       firstName: \"Seth\",\n    //       town: \"Funk Town\",\n    //       temp: 105,\n    //       pulse: 170,\n    //       Medications: [\n    //         {\n    //           medname: 'pineapple express',\n    //           dose: '420mg',\n    //           startDate: \"04/20/2020\"\n    //         },\n    //         {\n    //           medname: 'baby asprin',\n    //           dose: '2mg',\n    //           startDate: \"02/30/2019\"\n    //         },\n    //       ]\n    //     },\n    //     {\n    //       lastName: \"Simpson\",\n    //       firstName: \"Bart\",\n    //       town: \"Springfield\",\n    //       temp: 98,\n    //       pulse: 110,\n    //       Medications: [\n    //         {\n    //           medname: 'shorts',\n    //           dose: '100mg',\n    //           startDate: \"04/20/2020\"\n    //         },\n    //         {\n    //           medname: 'skateboarding',\n    //           dose: '200mg',\n    //           startDate: \"12/17/1989\"\n    //         },\n    //       ]\n    //     }\n    //   ]\n})\n\nmobxStore.getPatients()\n\n// New to mobx, this tutorial was good\n// https://medium.com/@shoaibbhimani1392/getting-started-with-mobx-82306df92d90\n\nReactDOM.render(<App mobxStore={mobxStore} />, document.getElementById('root'))\n"],"sourceRoot":""}